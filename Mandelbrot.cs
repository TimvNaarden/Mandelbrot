using System;
using System.Drawing;
using System.Windows.Forms;

namespace Mandelbrot_Namespace {
	class Mandebrot_class : Form {
		private readonly Bitmap MandelGrid = new(400, 400);
		private TextBox StartXInput;
		private TextBox StartYInput;
		private TextBox MaxTriesInput;
		private TextBox ScaleInput;
		private Label MandelDisplay;
		private Label StartXLabel;
		private Label StartYLabel;
		private Label ScaleLabel;
		private Label MaxTriesLabel;
		private Button RecalculateButton;
		public Mandebrot_class() {
			Text = "Mandelbrot";
			ClientSize = new Size(600, 420);
			InitializeComponent();
			// Leave here, otherwise the Visual Studio Designer Interferes with it and removes it
			MandelDisplay.Image = MandelGrid;
			// Show the mandelbrot image when program opens
			RenderMandelImage();
		}
		// Don't change this function, is automaticly generated by the VS Designer
		// You can chnage the values of sizes, point etc
		private void InitializeComponent() {
			StartXInput = new TextBox();
			StartYInput = new TextBox();
			MaxTriesInput = new TextBox();
			ScaleInput = new TextBox();
			MandelDisplay = new Label();
			StartXLabel = new Label();
			StartYLabel = new Label();
			MaxTriesLabel = new Label();
			ScaleLabel = new Label();
			RecalculateButton = new Button();
			SuspendLayout();
			// 
			// _startXInput
			// 
			StartXInput.Location = new Point(120, 10);
			StartXInput.Name = "m_StartX";
			StartXInput.Size = new Size(100, 27);
			StartXInput.TabIndex = 3;
			StartXInput.Text = "0";
			StartXInput.TextChanged += StartXInputTextChanged;
			// 
			// _startYInput
			// 
			StartYInput.Location = new Point(120, 45);
			StartYInput.Name = "m_StartY";
			StartYInput.Size = new Size(100, 27);
			StartYInput.TabIndex = 4;
			StartYInput.Text = "0";
			StartYInput.TextChanged += StartYInputTextChanged;
			// 
			// _maxTriesInput
			// 
			MaxTriesInput.Location = new Point(120, 77);
			MaxTriesInput.Name = "m_MaxTriesInput";
			MaxTriesInput.Size = new Size(100, 27);
			MaxTriesInput.TabIndex = 5;
			MaxTriesInput.Text = "100";
			MaxTriesInput.TextChanged += MaxTriesInputTextChanged;
			// 
			// _scaleInput
			// 
			ScaleInput.Location = new Point(310, 7);
			ScaleInput.Name = "m_Scale";
			ScaleInput.Size = new Size(100, 27);
			ScaleInput.TabIndex = 4;
			ScaleInput.Text = "0.01";
			ScaleInput.TextChanged += ScaleInputTextChanged;
			// 
			// _mandelDisplay
			// 
			MandelDisplay.Location = new Point(10, 110);
			MandelDisplay.Name = "m_MandelDisplay";
			MandelDisplay.Size = new Size(400, 400);
			MandelDisplay.TabIndex = 6;
			MandelDisplay.MouseClick += MandelDisplayMouseClick;
			// 
			// _startXLabel
			// 
			StartXLabel.Location = new Point(10, 10);
			StartXLabel.Name = "m_StartXLabel";
			StartXLabel.Size = new Size(75, 27);
			StartXLabel.TabIndex = 2;
			StartXLabel.Text = "X Start: ";
			// 
			// _startYLabel
			// 
			StartYLabel.Location = new Point(10, 45);
			StartYLabel.Name = "m_StartYLabel";
			StartYLabel.Size = new Size(75, 27);
			StartYLabel.TabIndex = 1;
			StartYLabel.Text = "Y Start:";
			// 
			// _maxTriesLabel
			// 
			MaxTriesLabel.Location = new Point(10, 77);
			MaxTriesLabel.Name = "m_MaxTriesLabel";
			MaxTriesLabel.Size = new Size(75, 27);
			MaxTriesLabel.TabIndex = 0;
			MaxTriesLabel.Text = "Max Tries:";
			// 
			// _recalculateButton
			// 
			RecalculateButton.Location = new Point(310, 73);
			RecalculateButton.Name = "m_Recalculate";
			RecalculateButton.Size = new Size(94, 29);
			RecalculateButton.TabIndex = 7;
			RecalculateButton.Text = "Go";
			RecalculateButton.UseVisualStyleBackColor = true;
			RecalculateButton.Click += RecalculateButtonClick;
			// 
			// _scaleLabel
			// 
			ScaleLabel.AutoSize = true;
			ScaleLabel.Location = new Point(253, 10);
			ScaleLabel.Name = "m_ScaleLabel";
			ScaleLabel.Size = new Size(51, 20);
			ScaleLabel.TabIndex = 8;
			ScaleLabel.Text = "Scale: ";
			// 
			// Mandebrot_class
			// 
			ClientSize = new Size(420, 520);
			Controls.Add(ScaleLabel);
			Controls.Add(RecalculateButton);
			Controls.Add(MaxTriesLabel);
			Controls.Add(StartYLabel);
			Controls.Add(StartXLabel);
			Controls.Add(StartXInput);
			Controls.Add(StartYInput);
			Controls.Add(ScaleInput);
			Controls.Add(MaxTriesInput);
			Controls.Add(MandelDisplay);
			Name = "Mandebrot_class";
			ResumeLayout(false);
			PerformLayout();
		}

		// The mandel image is being rendered here 
		private void RenderMandelImage() {
			// Get the scale input, otherwise return 
			if (!(float.TryParse(ScaleInput.Text.Replace('.', ','), out float Scale))) return;
			// Clear the image
			for (int i = 0; i < 400; i++) {
				for (int j = 0; j < 400; j++) {
					MandelGrid.SetPixel(i, j, Color.White);
				}
			}
			// Get the other input variables
			if (!(float.TryParse(StartXInput.Text.Replace('.', ','), out float StartX))) StartX = 0;
			if (!(float.TryParse(StartYInput.Text.Replace('.', ','), out float StartY))) StartY = 0;
			if (!(int.TryParse(MaxTriesInput.Text.Replace('.', ','), out int MaxTries))) MaxTries = 100;
			// Loop thru the 400x400 grid and adjust the cords with the input variables
			for (int i = 0; i < 400; i++) {
				for (int j = 0; j < 400; j++) {
					float MandelNumberX = (i - 200) * Scale + StartX;
					float MandelNumberY = (j - 200) * Scale + StartY;
					Color Color = (CalcMandelNumber(MandelNumberX, MandelNumberY, MaxTries) % 2 == 0) ? Color.Black : Color.White;
					MandelGrid.SetPixel(i, j, Color);
				}
			}
			MandelDisplay.Invalidate();
		}
		// Returns the mandelnumber, don't change 
		private static int CalcMandelNumber(float x, float y, int MaxTries) {
			int Tries = 0;
			float Distance = 0;
			float a = 0, b = 0;
			while (Tries < MaxTries && Distance <= 2) {
				Tries++;
				float olda = a;
				a = a * a - b * b + x;
				b = 2 * olda * b + y;
				Distance = (float)Math.Sqrt(a * a + b * b);
			}
			return Tries;
		}
		// Input fields change
		private void RecalculateButtonClick(object sender, EventArgs e) {
			RenderMandelImage();
		}

		private void StartXInputTextChanged(object sender, EventArgs e) {
			RenderMandelImage();
		}

		private void StartYInputTextChanged(object sender, EventArgs e) {
			RenderMandelImage();
		}

		private void MaxTriesInputTextChanged(object sender, EventArgs e) {
			RenderMandelImage();
		}

		private void ScaleInputTextChanged(object sender, EventArgs e) {
			RenderMandelImage();
		}
		// Mouseclicks, so zoom in and zoom out
		private void MandelDisplayMouseClick(object sender, MouseEventArgs e) {
			double ZoomFactor = (e.Button == MouseButtons.Left) ? 0.66 : 1.5;
			if (!(float.TryParse(StartXInput.Text.Replace('.', ','), out float StartX))) StartX = 0;
			if (!(float.TryParse(StartYInput.Text.Replace('.', ','), out float StartY))) StartY = 0;
			if (!(float.TryParse(ScaleInput.Text.Replace('.', ','), out float Scale))) return;
			StartXInput.Text = ((e.X - 200) * Scale + StartX).ToString();
			StartYInput.Text = ((e.Y - 200) * Scale + StartY).ToString();
			ScaleInput.Text = (Scale * ZoomFactor).ToString();


		}
	}
}




